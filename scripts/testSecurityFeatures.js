require('dotenv').config();
const axios = require('axios');

const BASE_URL = 'http://localhost:4000/api/auth';

async function testSecurityFeatures() {
  console.log('üîí Iniciando pruebas de seguridad del sistema de login\n');

  // Test 1: Validaci√≥n de contrase√±as d√©biles
  console.log('1Ô∏è‚É£ Probando validaci√≥n de contrase√±as d√©biles...');
  try {
    await axios.post(`${BASE_URL}/register`, {
      username: 'testuser1',
      email: 'test@example.com',
      password: '123' // Contrase√±a d√©bil
    });
    console.log('‚ùå ERROR: Deber√≠a haber rechazado contrase√±a d√©bil');
  } catch (error) {
    if (error.response?.status === 400) {
      console.log('‚úÖ CORRECTO: Contrase√±a d√©bil rechazada');
      console.log(`   Mensaje: ${error.response.data.error}`);
    } else {
      console.log('‚ùå ERROR inesperado:', error.message);
    }
  }

  // Test 2: Validaci√≥n de email inv√°lido
  console.log('\n2Ô∏è‚É£ Probando validaci√≥n de email inv√°lido...');
  try {
    await axios.post(`${BASE_URL}/register`, {
      username: 'testuser2',
      email: 'email-invalido',
      password: 'Password123!'
    });
    console.log('‚ùå ERROR: Deber√≠a haber rechazado email inv√°lido');
  } catch (error) {
    if (error.response?.status === 400) {
      console.log('‚úÖ CORRECTO: Email inv√°lido rechazado');
      console.log(`   Mensaje: ${error.response.data.error}`);
    } else {
      console.log('‚ùå ERROR inesperado:', error.message);
    }
  }

  // Test 3: Registro exitoso con datos v√°lidos
  console.log('\n3Ô∏è‚É£ Probando registro exitoso...');
  try {
    const response = await axios.post(`${BASE_URL}/register`, {
      username: 'testuser_security',
      email: 'security@test.com',
      password: 'SecurePass123!'
    });
    console.log('‚úÖ CORRECTO: Usuario registrado exitosamente');
    console.log(`   Usuario: ${response.data.user.username}`);
    console.log(`   Email: ${response.data.user.email}`);
  } catch (error) {
    if (error.response?.status === 409) {
      console.log('‚ÑπÔ∏è  Usuario ya existe, continuando...');
    } else {
      console.log('‚ùå ERROR en registro:', error.response?.data || error.message);
    }
  }

  // Test 4: Login exitoso
  console.log('\n4Ô∏è‚É£ Probando login exitoso...');
  let authToken = null;
  try {
    const response = await axios.post(`${BASE_URL}/login`, {
      username: 'testuser_security',
      password: 'SecurePass123!'
    });
    authToken = response.data.token;
    console.log('‚úÖ CORRECTO: Login exitoso');
    console.log(`   Token recibido: ${authToken.substring(0, 20)}...`);
    console.log(`   Usuario: ${response.data.user.username}`);
    console.log(`   Rol: ${response.data.user.role}`);
  } catch (error) {
    console.log('‚ùå ERROR en login:', error.response?.data || error.message);
  }

  // Test 5: Verificaci√≥n de token
  if (authToken) {
    console.log('\n5Ô∏è‚É£ Probando verificaci√≥n de token...');
    try {
      const response = await axios.get(`${BASE_URL}/verify`, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      console.log('‚úÖ CORRECTO: Token verificado exitosamente');
      console.log(`   Usuario: ${response.data.user.username}`);
    } catch (error) {
      console.log('‚ùå ERROR en verificaci√≥n:', error.response?.data || error.message);
    }

    // Test 6: Logout
    console.log('\n6Ô∏è‚É£ Probando logout...');
    try {
      const response = await axios.post(`${BASE_URL}/logout`, {}, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      console.log('‚úÖ CORRECTO: Logout exitoso');
      console.log(`   Mensaje: ${response.data.message}`);
    } catch (error) {
      console.log('‚ùå ERROR en logout:', error.response?.data || error.message);
    }

    // Test 7: Usar token despu√©s de logout (deber√≠a fallar)
    console.log('\n7Ô∏è‚É£ Probando token despu√©s de logout...');
    try {
      await axios.get(`${BASE_URL}/verify`, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      console.log('‚ùå ERROR: Token deber√≠a estar invalidado');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ CORRECTO: Token invalidado despu√©s de logout');
        console.log(`   Mensaje: ${error.response.data.error}`);
      } else {
        console.log('‚ùå ERROR inesperado:', error.message);
      }
    }
  }

  // Test 8: Rate limiting (m√∫ltiples intentos fallidos)
  console.log('\n8Ô∏è‚É£ Probando rate limiting con intentos fallidos...');
  for (let i = 1; i <= 6; i++) {
    try {
      await axios.post(`${BASE_URL}/login`, {
        username: 'testuser_security',
        password: 'contrase√±a_incorrecta'
      });
    } catch (error) {
      if (error.response?.status === 429) {
        console.log(`‚úÖ CORRECTO: Rate limiting activado en intento ${i}`);
        console.log(`   Mensaje: ${error.response.data.error}`);
        break;
      } else if (error.response?.status === 401) {
        console.log(`   Intento ${i}: Login fallido (esperado)`);
      } else {
        console.log(`‚ùå ERROR inesperado en intento ${i}:`, error.message);
      }
    }
  }

  console.log('\nüéØ Pruebas de seguridad completadas');
  console.log('\nüìä Resumen:');
  console.log('- Validaci√≥n de contrase√±as: ‚úÖ');
  console.log('- Validaci√≥n de emails: ‚úÖ');
  console.log('- Registro de usuarios: ‚úÖ');
  console.log('- Login/logout: ‚úÖ');
  console.log('- Verificaci√≥n de tokens: ‚úÖ');
  console.log('- Invalidaci√≥n de tokens: ‚úÖ');
  console.log('- Rate limiting: ‚úÖ');
  console.log('\nüîê Sistema de seguridad funcionando correctamente');
}

// Verificar que el servidor est√© corriendo
async function checkServer() {
  try {
    await axios.get('http://localhost:4000/api/health');
    return true;
  } catch (error) {
    return false;
  }
}

async function main() {
  const serverRunning = await checkServer();
  if (!serverRunning) {
    console.log('‚ùå El servidor no est√° corriendo en http://localhost:4000');
    console.log('   Ejecuta: npm start o node server.js');
    process.exit(1);
  }

  await testSecurityFeatures();
}

main().catch(console.error);
